class MySet {
    constructor(array) {
        // фильтрация
        this.array = array.reduce((accumulator, currentValue) => {
            if (!accumulator.includes(currentValue)){
                accumulator.push(currentValue);
            }
            return accumulator;
        }, [])

        // вот сюда
        // this[Symbol.iterator] = () => this.array[Symbol.iterator]();
        //this[Symbol.toStringTag] = 'MySet'; // имя класса
    }
    
    *[Symbol.iterator]() { // вот она
        yield* this.array[Symbol.iterator]();
    }
    
    get [Symbol.toStringTag]() {
        return 'MySet'; // вот она
    }
    
    // очень элегантно
    get size(){
        return this.array.length;
    }
    
    // только методы
    keys(){
        return this[Symbol.iterator];
    }
    values(){
        return this[Symbol.iterator]; // итератор по умолчанию
    }
    entries(){
        return this.array.map(item => [item, item])[Symbol.iterator]()
    }
    clear(){
        this.array = [];
    }
    add(item){
        if(!this.array.includes(item)){
            this.array.push(item);
        }
    }
    delete(item){
        const index = this.array.indexOf(item);
        // i want to true to use it
        if (~index) { // вот она <---
            this.array.splice(index, 1);
        }
    }
    has(item){
        return this.array.includes(item);
    }
    forEach(fn, context){
        for (const item of set){
            fn.call(context, item); // контекст
        }
    }
}

[4, 8, 15, 16].forEach(function () {}, {a: 42}) // ок